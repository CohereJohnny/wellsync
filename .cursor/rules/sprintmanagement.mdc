---
description: 
globs: 
alwaysApply: true
---
# Streamlined Sprint Workflow - WellSync AI

This document defines a simplified sprint workflow for managing development sprints in the WellSync AI project, optimized for collaboration between the User and the AI Assistant (Gemini). It aims to reduce overhead and work around AI tool limitations.

## 1. Sprint Initialization

1.  **AI Action:** Create the Git branch for the sprint (e.g., `git checkout -b sprint-x`).
2.  **AI Action:** Create the sprint directory (e.g., `mkdir sprints/sprint_x`).
3.  **AI Action:** Based on `sprintplan.md`, the AI generates the initial task list for the sprint goals in the chat.
4.  **AI Action:** Manually create `sprints/sprint_x/sprint_x_tasks.md`. Paste the AI-generated task list into this file. Add appropriate headers (`# Sprint X Tasks`, `## Goals`, `## Tasks`).
5.  **(Optional) AI Action:** Generate a draft test plan based on tasks.
6.  **(Optional) User Action:** Manually create `sprints/sprint_x/sprint_x_testplan.md` and paste/edit the AI-generated test plan.

## 2. Sprint Execution

1.  **AI Action:** Implement code changes required to meet the sprint goals defined in `sprints/sprint_x/sprint_x_tasks.md`.
2.  **AI Action:** **Directly edit `sprints/sprint_x/sprint_x_tasks.md`** throughout the sprint:
    *   Mark tasks as complete using `[x]`.
    *   Add progress notes, relevant code snippets, observations, or commit references directly under the corresponding task in a "Progress" section.
3.  **AI Action:** Commit code changes *and* the updated `sprint_x_tasks.md` file frequently to the `sprint-x` branch (e.g., `git add . && git commit -m "feat: Implement feature X (closes task Y)"`).

## 3. Bug Swatting

1.  **AI Action:** If a critical bug blocking progress is found:
    *   Pause work on sprint tasks.
    *   Fix the bug.
    *   Manually log the bug fix details in `sprints/bug_swatting.md` using the format:
        ```markdown
        ## Bug Entry: [Date]
        - **ID**: BUG-XXX
        - **Description**: ...
        - **Discovered**: ...
        - **Context**: Sprint X, Feature Y
        - **Fix**: ...
        - **Status**: Resolved
        ```
    *   Reference the Bug ID in the commit message (e.g., `fix: Resolve BUG-XXX affecting component Z`).
    *   Resume work on sprint tasks.

## 4. Sprint Review (Lightweight)

1.  **AI Action:** Near the end of the sprint, review the completed tasks in `sprints/sprint_x/sprint_x_tasks.md`.
2.  **AI Action:** Manually execute key tests based on `sprints/sprint_x/sprint_x_testplan.md` (if created).
3.  **AI Action:** Run `pnpm run build` locally to check for build errors.
4.  **AI Action:** Add a brief "## Sprint Review" section at the bottom of `sprints/sprint_x/sprint_x_tasks.md`. Include notes on:
    *   Demo Readiness: What key features are working?
    *   Gaps/Issues: What's incomplete or needs refinement?
    *   Next Steps: What should be carried over or addressed next?

## 5. Sprint Completion

1.  **AI Action:** Upon user request, the AI reads the final, committed version of `sprints/sprint_x/sprint_x_tasks.md`.
2.  **AI Action:** The AI generates a draft summary report in the chat, based *only* on the contents of `sprint_x_tasks.md` (task status, progress notes, review section).
3.  **AI Action:** Manually create `sprints/sprint_x/sprint_x_report.md`. Paste and refine the AI-generated report draft.
4.  **AI Action:** Finalize `sprints/sprint_x/sprint_x_testplan.md` (if used).
5.  **AI Action:** Commit all final sprint documentation (`sprint_x_tasks.md`, `sprint_x_report.md`, `sprint_x_testplan.md`) to the `sprint-x` branch.
6.  **AI Action:** Create a pull request for `sprint-x`, verify checks pass (including `pnpm run build`), and merge into `main`.
7.  **AI Action:** Tag the merge commit (`git tag sprint-x <commit-hash>`) and push the tag (`git push origin sprint-x`).
8.  **AI Action:** Archive the sprint directory (`mv sprints/sprint_x/ sprints/archive/`).
9.  **AI Action:** Delete the `sprint-x` branch locally and remotely (`git branch -d sprint-x; git push origin --delete sprint-x`).

## Key Files Per Sprint

- `sprints/sprint_x/sprint_x_tasks.md`: The primary file for tracking tasks, progress, and review notes. **User-maintained.**
- `sprints/sprint_x/sprint_x_testplan.md`: (Optional) Detailed test cases. User-maintained, AI can draft.
- `sprints/sprint_x/sprint_x_report.md`: Final summary report. AI drafts, User finalizes.

## Central Logs

- `sprints/sprintplan.md`: High-level plan for all sprints.
- `sprints/bug_swatting.md`: Log for critical bug fixes.
- `sprints/tech_debt.md`: Log for non-critical issues/refactors.
- `sprints/backlog.md`: Log for new feature ideas.